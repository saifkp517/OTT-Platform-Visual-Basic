<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6
        JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJ
        TUUH5gQNBSkdKqgd+wAADwFJREFUeF7tnXnwfWMdx3+FCEWUtJc1iRZpXyaZiTb6KUmLJUVKJS0K1SQV
        pUWbQfzKEpEWI1OKolBTJGksRUkLLUIkaXm/zPdOt2c+537Pc++555zn3vdr5vUPv3u+Z7mfe855ns/n
        8ywxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYY
        Y4wxxhhjjDGmE5aXG8gt5VK5k9xd7jFH7ipfLLeSm8iVpJlT7iN3kEfIS+Xt8j/2//yXvEqeIHeTD5Vm
        hllREhRfl3fI6EthR3u+3FOuLs2MsIrcR/5ORhfd5nuzPETeV5pCuYvcRV4vo4tsJ/dWeYDk7mwKYn15
        rowuqm3eK+TTpCkA3jNuktGFtNOT97r95F2l6SE8Uh0qo4tn2/M0ubI0PWIFeZyMLpht3/PkGtL0AG7p
        p8joQtnuvEjeU5qOOVxGFyjXW+SF8lS5TLLdefJoebJkruMGGZ2jXM+WHuHqkL1ldGHqepncX24ul5Pm
        f2wk95IXyOjc1fVz0nTAE+S4KSJnyS2kqcem8kRJ+kl0PhdzZ2lahNnxq2V0MUZ5jdxGmvHgR4nH0Ojc
        jpLH1/WkaYmDZXQhRsm7hXOIJocRw3GG08+QpgV4Ns59tCJvyDQLaTy5SZ+UEpgpc5KMTn6V75VmOlA/
        kvNeQmkBE7pmSmwocy7IkdJMF0a6onNf5XbSTAnG66OTHvlj6TH4dviCjK5BJPMsZgpQAlp3Aot3lI2l
        aQcGP66T0bWIpLzZNAzPu9HJjvywNO3CXEd0LSLfJ03DHC+jk53KmDs156ZdyES4UkbXJPUSaRqmbsks
        7ymmG6hXj65J6r/lWtI0BKNX0YmOZLbXdAMp7rfJ6LqkvkSahtheRic5lbuM6ZYzZXRtUg+SpiHeJaOT
        nEoPJ9Mt+8ro2qRSw2Ma4lgZneTUt0nTLVvL6NqkXixNQ5wuo5Ocuq003bKOjK5N6rXSNMQ5MjrJqW49
        0z2ryejapN4oTUOQNhKd5NQHS9Mt9AiIrk0qOXWmIX4io5OcavpBdG0iTUM4QMoiujaRpiEcIGURXZtI
        0xAOkLKIrk2kaYg2AoQFYo6ydzrpYEd0bSJNQ7QRII+T0Tbn0UfLSYi2GWkawgHSrg6QwnCAtKsDpDAc
        IO3qACkMB0i7OkAKwwHSrg6QwnCAtKsDpDAcIO3qACkMB0i7OkAKo40AoVXQbvZO15STEF2bSNMQbQSI
        aY7o2kSahnCAlEV0bSJNQzhAyiK6NpGmIRwgZRFdm0jTEA6QsoiuTaRpCAdIWUTXJtI0hAOkLKJrE2ka
        wgFSFtG1iTQN4QCZHiyqSbnxlvJVcj/JAkSfkZTfHiEPkzSbfpNkIaPN5KqyiujaRJqGaCNAmEnfY478
        gPyuvElG53IxWePjF5L1CV8vHyEHRP8+0jREGwHiXKzJ/bX8ePLfRmkawgEym5qGcIDMpqYhHCDT9W/y
        Qsn7xCGSBYv2lrvLN0pe3D8ol0nWOf+LjLaTq2kIB0iz/kGyGhep7etJRrJyuZ98qWSU65cy+juLaRrC
        ATK53CU+LxnOZYmCpuH8MRx8vYz+fqRpCAfI+HK3YGm6e8g2WEHuLC+X0f4MS8CuIs2EOEDy5T2B94e7
        yy7gLsVSz1fLaP8G/kw+TJoJcIDUlwm8YyQTn32AAD1Q/kNG+4vXySdKMyZtBAgdzQ8vwD/J6NiRdeKf
        KfvIw+VPZbTfyDtSX/e997QRICUwar34b8i1ZJ/hbsKoV7T/+He5hTSZOECWLHmtjI4ZPyLHGartitfI
        O2R0LOSG8bhrMpj3AHmOrPpCMUJVIi+U3DGiY2Lk7UHS1GSeA2R9+VcZHS9ZuSXDO0dVkLD0d1cjcMUx
        rwGyorxIRse6v2yae0veAV4h3yLfueBecqmk4yLzHE3CnYQ106Nj/LQ0NZjXADlURsf5CdkEK8lt5Wfl
        NTL6W6n84p8nyc9iZKoJyPmK/ha+QJpFmMcAeZKMflm/J5eXk8CQNsE3asi4rj+Sr5ST7hNBGm3/t3I1
        aUYwbwHCly2aM+AL/UA5LjxCcfcZNWk3riQsMnM+LrxvXCKjbX9SmhHMW4C8TkbHx/P6uJB5+0cZbbdJ
        z5QPkeNA2W4UvIzgbSRNBW0ESJ9q0qOM2NPkOPCeQepJur3If8qL5cmSzNz3S+pAeFnm718lo8+lMurG
        u804UCsfbfOr0lTQRoD0ORfrVjlOQh/LGPxQRtscyJeZ2e2tZZ3M2rUl7xxnyKrRJyQnbF+Zy8ryVzLa
        5qOkCZj3AOFXPBfSTkblPjEZ9wbJF3JcNpDHSoIh+hs4zr7vKKNtUfFoAuY5QLh75OZYcSdgoi3aHl/m
        T8km60MYcbtMRn8PGRLOYTlJS6F0O7dL7mAmYZ4DhDY6uZwqo22R5zSteQXuRCfK6O8iDedyoBw42s47
        pEmY1wDh134dmUNVUiMjWI+R04SEyarJTYJzXVmXu8k/y3Q7FFiZhHkNkHNlDgTTLTLdDl/OaQfHMMy1
        pPuA58icrGNGz6LtbCzNEPMaIKSF5/BFmW6Du9DzZJtQbssoV7ovyAhYXagyjLZRagbz1JjHAGEIdQ1Z
        l8fLaDvUinQBs/aU0qb7Q84Xj091oZ1puo1vSzPEPAYIo1A5RC/INEzoMmV8B5nuE9JFvi7RJCcJk5Pm
        fs0UbQRIlzXp0ZDmh2RdaOLGEGi6DdJLuuYCme4XKfx1IfU+/Tw+VpoF2giQLonmLHLeG/aR6eeZl5hG
        g7hcqIZM9w03lXXghyv6PMPAZoFZDhAmxW6T6bHkpJZ8X6afZ5a8DzBqFd0h3yPrEq1hknOHnXlmOUDI
        fE2Pg2fsur/+zIin9eq84HfV4YR3nt/IGyVtiK6QN8jh/cNL5S6SFHnullQyVmXsUnOSft7Ji0PMcoA8
        RabHQV1EXZ4l08+ToNglLNWW7lMdt5cRx8v033Z9jL2iKq8otQ/P3LmQFp4ex7dkXWgvmn7+Y7JLSLGn
        EjDdr1F+WVYRzc4z/GsWYAY2PUGRbTVobpKdZHoco74sKdGSZ6+WXcO6hel+VckjGCNxVfC+kn6GRziz
        wOkyPUGRJTZBZrY8PQ66nteFFPD081vJrqEjC+8i6b5F7ipHQYeV9DMMbJgF+MKkJyjy2bI0oo4eFDDV
        hUq/9PNPln1gVDfIgd+UixGVIDMwYRY4QKYnKPLtsjSitG5eSusSBQgv/n2AlJKq6kCkYTVrtC8GuVfp
        Z/2INQSjG+kJiqSBc2m8TKbH8TVZl+gRi/LZvsD7ULp/A2lIVweWT0g/y+ObWYDSzvQERfJcei9ZEtFM
        89myLn19SR9AzlS0hiH9veqOOjIql37+59IMUXfYcE9ZEpvJ9BiYea5LNMz7UdknmBAc3j9+yHK6MkYV
        kgSYGeI4mZ6kSGZuSd8oBWa802PgBbRuSngfJwpTuItcKQf7l1s2y6z78PHh0dIMsZ1MT1KVLCJZElGu
        EU3U6tC3VJMqKJRi31iPPSdVnR+7qJlciQMyU4Vx9SinJ5JCndVlKUQp4Tmp6jSTTj/PRF2f4ItOPTkd
        4nOgvDY9Nhy3Md1MU1WjHEkBUSnQhifd/5y5kLfK9PM8lvRt1alx7mqMdKXHhnWGh+cOFpNJHydGyQts
        CURFQTkv6g+Q0XnhsbR0SLtJj4tKSVNBNO5fJc/ik3QcbwuWG4v2Pyd15hSZfp4XYx5NS4XFeljvPT0u
        lkowFWwoc9r388uaUwPdFdFITU5Hwqqa+nFaf/aF58vomJhcNSOg63h04kbJhFpON422OUim+0zZbA7R
        XYS7aJ9m1nOgy3x6PMyhlDQA0wm0uYxmZxeTwiv6yPaRTWS0z/SGqgvVieQ3pdsgb6nNxnFNQMujqBSZ
        HwFTAx4pxlkpiUZqnOQ+fmGiwrAvyRzIJEi3gaxOxTkrhagGBLeRpiY0JohOYl35QlJrwLoTfRgSjTJ7
        Cei6k4YDokct5O5SVdbaJ5j8jF7OWbKh6VV2Z56qPrC53iwJmK9I1rw4qgOr0mlOkDmMWv4ASdPoc1In
        qSjRfrvl6BiQETqq7f4syF3kqTIHlpRj5jraHtLt/c2yzqpSbcKcDj9W6f7S6b3EkupeQG7PMpme1FmS
        1aJy223SH/cHMtreQNJ3aIrQZYvSYaIG3PhuaSaEMf/o5M6K46z5xxefR8Zoe8P2Yall+mNF+3atXFWa
        BiC9goUpoxNduqxCO+4w9ctltCDNwK7b6LD+OyNt0b6VMLBQFCwkQ1VedLJLl+UDcpZFGIZHLhI+o0bX
        XdaQ8OhIAVS6T1inqYMZE1ISfi+jE1+y35GT5Fgxoci6IYM7CvXdVDZ2xZEyPUbkSSB3CTqTCc/gzJfU
        7dFUikwgTtpJkowE5li6nFuIGjIMfJE0LUEeFu8nND2OHjFKlPmMksqLU6JlGwZSI2M6gkmypZKRm4sl
        3dSji1SCNDQoMaX9YBkdD076CGkahkcVKtSeIUmx3lGSIk/qR1+kS2HVKBRfqDVlCfDFHzVnxQ/WatKY
        bDaXZOZGXyzesfrSUbGK9SRNG6L9RyoFRzWxNmZRWM02SuRD5kkosupjQh9lxVH3loE0gqOy0piJeaRk
        PiT6oiE5WE+XfYBVo86S0X4OPF+W8ohoCoFHkcXyrE6SFGJ1ATPjh8nFRgwZrma42ZjGYeh6sVZIZAKT
        wt/W+wl3DCb+Fitm4//3ZaFRM+NQZXe9jL6Iw9LlhKxY2ic1ydqSFkvRYpuR7AcDDsa0BnlWx8joCxnJ
        uh38e16eqaism+7OAACNp5l0pVgt6sZSJfNNBKjnOExn0OShKvFvlDyKkdHLZ8+Q1GUQQBSjsQQe60TS
        GJyRsujzi0kGw7rSmF7AOoXjBEqTDhpk5PbjNaY1eNZn5jpqBzQtaR7OGiW5zSaM6Qwq8iia4hd91ITd
        uFJWQNOJ58rc0mBjegUv2lQmssYGcyWXy5x3C5oqMGLFYqN0X/edwsw8pM3TLJvAIWGT9UlYiIhRLoaR
        t5A8rt1fGmOMMcYYY4wxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY4wx
        xhhjjDHGGGOMMcYY00uWLPkvlC/ABsgCNVAAAAAASUVORK5CYII=
</value>
  </data>
</root>